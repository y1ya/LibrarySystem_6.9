/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package libsys;

import java.awt.Color;
import static java.lang.System.in;
import java.sql.Date;
import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;


public class AdminBase extends main {
    DefaultTableModel tblAccounts = new DefaultTableModel();
    int x = 0;
    
    String username, password, usertype, searchUserID, fullname, birthdate, sex, address, stringContactNumber;
    int userid, ids;
    long contactNumber;
    
    public AdminBase() {
        initComponents();
        
        membersPanel.setVisible(false);
        mainTable.setDefaultEditor(Object.class, null);
    }
    
    public int id;

    void showMemberInfo() {
        txtFullname.setEditable(false);
        lblFullname.setVisible(true);
        txtFullname.setVisible(true);
        lblFirstname.setVisible(false);
        lblLastname.setVisible(false);
        txtFirstname.setVisible(false);
        txtLastname.setVisible(false);
    }
    void nullMember() {
        txtFirstname.setText(null);
        txtLastname.setText(null);
        txtBirthdate.setText(null);
        cbSex.setSelectedIndex(0);
        txtAddress.setText(null);
        txtNumber.setText(null);
    }
    void editMember() {
        lblFirstname.setVisible(true);
        lblLastname.setVisible(true);
        txtFirstname.setEditable(true);
        txtLastname.setEditable(true);
        txtFirstname.setVisible(true);
        txtLastname.setVisible(true);
        lblFullname.setVisible(false);
        txtFullname.setVisible(false);
        txtBirthdate.setEditable(true);
        cbSex.setEnabled(true);
        txtAddress.setEditable(true);
        txtNumber.setEditable(true);
    }
    void randNum() {
        id = randNumGen("accounts", "userid");
        txtUserID.setText(String.valueOf(id));
    }
    void Default() {
        txtEmail.setText(null);
        txtPassword.setText(null);
        cbUserType.setSelectedIndex(0);
    }
    
    void editing() {
        txtEmail.setEditable(true);
        txtPassword.setEditable(true);
        cbUserType.setEnabled(true);
        randomNum.setVisible(true);
        
        btnAdd.setVisible(false);
    }
    
    void adding() {
        txtEmail.setEditable(true);
        txtPassword.setEditable(true);
        cbUserType.setEnabled(true);
        
        btnSave.setVisible(false);
        btnEdit.setVisible(false);
        btnDelete.setVisible(false);
        randomNum.setVisible(true);
        btnAdd.setVisible(true);
        
        txtUserID.setEditable(false);
    }
    
    void notEditing() {
        txtEmail.setEditable(false);
        txtPassword.setEditable(false);
        cbUserType.setEnabled(false);
        txtFirstname.setEditable(false);
        txtLastname.setEditable(false);
        txtBirthdate.setEditable(false);
        cbSex.setEnabled(false);
        txtAddress.setEditable(false);
        txtNumber.setEditable(false);
        
        btnSave.setVisible(true);
        btnEdit.setVisible(true);
        btnDelete.setVisible(true);
        randomNum.setVisible(false);
        btnAdd.setVisible(false);
    }
    
    public void Table() {
        String[] columnNames = {"User ID", "Fullname", "Password", "Email", 
            "Contact Number", "Address", "Birthdate", "Sex", "User Type"};
        tblAccounts.setColumnIdentifiers(columnNames);
        tblAccounts.setRowCount(0);
        
        try {
            databaseConnect("accounts");
            while(rs.next()) {
                tblAccounts.addRow(new Object[] 
                {
                    rs.getInt("USERID"), 
                    rs.getString("FULLNAME"), 
                    rs.getString("PASSWORD"),
                    rs.getString("EMAIL"),
                    rs.getLong("CONTACTNUMBER"),
                    rs.getString("ADDRESS"),
                    rs.getDate("BIRTHDATE"),
                    rs.getString("SEX"),
                    rs.getString("USERTYPE")
                });
                x++;
            }
            refreshRsStmt("accounts");
        } catch (SQLException err) {
            JOptionPane.showMessageDialog(null, err.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        mainTable = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        txtPassword = new javax.swing.JTextField();
        txtUserID = new javax.swing.JTextField();
        cbUserType = new javax.swing.JComboBox<>();
        btnSave = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        randomNum = new javax.swing.JButton();
        btnLogout = new javax.swing.JButton();
        membersPanel = new javax.swing.JPanel();
        lblFirstname = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtFirstname = new javax.swing.JTextField();
        txtAddress = new javax.swing.JTextField();
        txtNumber = new javax.swing.JTextField();
        cbSex = new javax.swing.JComboBox<>();
        txtBirthdate = new javax.swing.JTextField();
        lblLastname = new javax.swing.JLabel();
        txtLastname = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        lblFullname = new javax.swing.JLabel();
        txtFullname = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        mainTable.setModel(tblAccounts);
        mainTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                mainTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(mainTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(28, 51, 918, 193));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 250, 977, 10));

        jLabel1.setText("Email:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(148, 298, -1, -1));

        jLabel2.setText("Password:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(121, 340, -1, -1));

        jLabel3.setText("User ID:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(138, 386, -1, -1));

        jLabel4.setText("User Type:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(122, 433, -1, -1));
        getContentPane().add(txtEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(214, 294, 285, -1));
        getContentPane().add(txtPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(214, 336, 285, -1));
        getContentPane().add(txtUserID, new org.netbeans.lib.awtextra.AbsoluteConstraints(214, 382, 285, -1));

        cbUserType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "GUEST", "MEMBER", "LIBRARIAN", "ADMIN" }));
        cbUserType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbUserTypeActionPerformed(evt);
            }
        });
        getContentPane().add(cbUserType, new org.netbeans.lib.awtextra.AbsoluteConstraints(214, 428, 285, -1));

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        getContentPane().add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 480, -1, -1));

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        getContentPane().add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(201, 480, -1, -1));

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        getContentPane().add(btnClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(271, 480, -1, -1));

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });
        getContentPane().add(btnEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(349, 480, -1, -1));

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        getContentPane().add(btnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(502, 480, -1, -1));

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(418, 480, -1, -1));

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel5.setText("User's Accounts:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 7, -1, -1));

        randomNum.setText("Random Number");
        randomNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomNumActionPerformed(evt);
            }
        });
        getContentPane().add(randomNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(517, 378, -1, -1));

        btnLogout.setText("Log out");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });
        getContentPane().add(btnLogout, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 561, -1, -1));

        membersPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        membersPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblFirstname.setText("First Name:");
        membersPanel.add(lblFirstname, new org.netbeans.lib.awtextra.AbsoluteConstraints(39, 22, -1, -1));

        jLabel7.setText("Birthdate:");
        membersPanel.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(48, 104, -1, -1));

        jLabel8.setText("Sex:");
        membersPanel.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(78, 141, -1, -1));

        jLabel9.setText("Address:");
        membersPanel.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(52, 178, -1, -1));

        jLabel10.setText("Contact Number:");
        membersPanel.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 214, -1, -1));
        membersPanel.add(txtFirstname, new org.netbeans.lib.awtextra.AbsoluteConstraints(121, 18, 160, -1));
        membersPanel.add(txtAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(121, 174, 160, -1));

        txtNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNumberKeyTyped(evt);
            }
        });
        membersPanel.add(txtNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(121, 210, 160, -1));

        cbSex.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", "Other" }));
        membersPanel.add(cbSex, new org.netbeans.lib.awtextra.AbsoluteConstraints(121, 136, -1, -1));
        membersPanel.add(txtBirthdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(121, 100, 160, -1));

        lblLastname.setText("Last name:");
        membersPanel.add(lblLastname, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 58, -1, -1));
        membersPanel.add(txtLastname, new org.netbeans.lib.awtextra.AbsoluteConstraints(121, 54, 160, -1));

        jLabel11.setFont(new java.awt.Font("Dialog", 2, 8)); // NOI18N
        jLabel11.setText("YYYY-MM-DD");
        membersPanel.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(121, 84, -1, -1));

        lblFullname.setText("Fullname:");
        membersPanel.add(lblFullname, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, -1, -1));
        membersPanel.add(txtFullname, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, 160, -1));

        getContentPane().add(membersPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 270, 295, 259));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        if (cbUserType.getSelectedItem() != "MEMBER") {
            username = txtEmail.getText();
            password = txtPassword.getText();
            userid = Integer.parseInt(txtUserID.getText());
            usertype = String.valueOf(cbUserType.getSelectedItem());
        
            try {
                databaseConnect("accounts");
                if (emailTaken(username)) {
                    JOptionPane.showMessageDialog(null, "Email already taken");
                    return;
                } 
                if (username.isEmpty() || password.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Must satisfy all fields");
                } else if (username.length() < 4) {
                    JOptionPane.showMessageDialog(null, "Email must be greater than or equal to 4 characters");
                } else if (password.length() < 6) {
                    JOptionPane.showMessageDialog(null, "Password must be greater than or equal to 6 characters");
                } else {
                    if(rs.next()) {
                        rs.moveToInsertRow();
                        rs.updateInt("USERID", userid);
                        rs.updateString("EMAIL", username);
                        rs.updateString("PASSWORD", password);
                        rs.updateString("USERTYPE", usertype);
                        rs.insertRow();
                        refreshRsStmt("accounts");

                        JOptionPane.showMessageDialog(null, "Account has been Added!");
                        Default();
                        randNum();
                        Table();
                    }
                }
                
            } catch (SQLException err) {
                JOptionPane.showMessageDialog(null, err.getMessage());
            }
        } else {
            username = txtEmail.getText();
            password = txtPassword.getText();
            userid = Integer.parseInt(txtUserID.getText());
            usertype = String.valueOf(cbUserType.getSelectedItem());
            fullname = txtFirstname.getText() + " " + txtLastname.getText();
            birthdate = txtBirthdate.getText().trim();
            sex = String.valueOf(cbSex.getSelectedItem());
            address = txtAddress.getText();
            stringContactNumber = txtNumber.getText();
            
            try {
                databaseConnect("accounts");
                if (emailTaken(username)) {
                    JOptionPane.showMessageDialog(null, "Email already taken");
                    return;
                } 
                if (username.isEmpty() || password.isEmpty() ||
                        txtFirstname.getText().isEmpty() || txtLastname.getText().isEmpty() 
                        || birthdate.isEmpty() || address.isEmpty() || stringContactNumber.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Must satisfy all fields");
                } else if (username.length() < 4) {
                    JOptionPane.showMessageDialog(null, "Email must be greater than or equal to 4 characters");
                } else if (password.length() < 6) {
                    JOptionPane.showMessageDialog(null, "Password must be greater than or equal to 6 characters");
                } else if (fullname.length() < 3) {
                    JOptionPane.showMessageDialog(null, "Fullname must be greater than or equal to 3 characters");
                } else if (birthdate.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Must input your birthdate");
                } else if (address.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Must input your address");
                } else if (stringContactNumber.length() < 11) {
                    JOptionPane.showMessageDialog(null, "Contact Number must be greater than or equal to 11 characters");
                } else {
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                    java.util.Date birthDate = dateFormat.parse(birthdate);
                    java.sql.Date sqlBirthDate = new java.sql.Date(birthDate.getTime());
                    
                    contactNumber = Long.parseLong(stringContactNumber);
                    if(rs.next()) {
                        rs.moveToInsertRow();
                        rs.updateInt("USERID", userid);
                        rs.updateString("EMAIL", username);
                        rs.updateString("PASSWORD", password);
                        rs.updateString("FULLNAME", fullname);
                        rs.updateDate("BIRTHDATE", sqlBirthDate);
                        rs.updateString("SEX", sex);
                        rs.updateString("ADDRESS", address);
                        rs.updateLong("CONTACTNUMBER", contactNumber);
                        rs.updateString("USERTYPE", usertype);
                        rs.insertRow();
                        refreshRsStmt("accounts");

                        JOptionPane.showMessageDialog(null, "Account has been Added!");
                        Default();
                        randNum();
                        editMember();
                        Table();
                    }
                }
            } catch (SQLException err) {
                JOptionPane.showMessageDialog(null, err.getMessage());
            } catch (ParseException ex) {
                Logger.getLogger(AdminBase.class.getName()).log(Level.SEVERE, null, ex);
            } 
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        txtUserID.setText(String.valueOf(id));
        
        Default();
        adding();
        randNum();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        searchUserID = JOptionPane.showInputDialog(null, "Search for the User's Account: ", "Finding Account"
                , JOptionPane.QUESTION_MESSAGE);
        
        if (searchUserID != null) {
            try {
                databaseConnect("accounts");
                int newId = Integer.parseInt(searchUserID);
                
                try {
                    ResultSet rs = stmt.executeQuery("SELECT * FROM ACCOUNTS WHERE USERID = " + searchUserID);
                    if (rs.next()) {
                        txtEmail.setText(rs.getString("EMAIL"));
                        txtPassword.setText(rs.getString("PASSWORD"));
                        txtUserID.setText(String.valueOf(rs.getInt("USERID")));
                        cbUserType.setSelectedItem(rs.getString("USERTYPE"));
                        if (cbUserType.getSelectedItem() == "MEMBER") {
                            showMemberInfo();
                            txtFullname.setText(rs.getString("FULLNAME"));
                            txtBirthdate.setText(String.valueOf(rs.getDate("BIRTHDATE")));
                            cbSex.setSelectedItem(rs.getString("SEX"));
                            txtAddress.setText(rs.getString("ADDRESS"));
                            txtNumber.setText(String.valueOf(rs.getLong("CONTACTNUMBER")));
                        }
                        notEditing();
                    } else {
                        JOptionPane.showMessageDialog(null, "Account not Found.");
                        Default();
                        adding();
                    }
                    refreshRsStmt("accounts");
                } catch (SQLException err) {
                        JOptionPane.showMessageDialog(null, err.getMessage());
                }
            } catch (NumberFormatException e){
                JOptionPane.showMessageDialog(null, "Invalid input. Please enter an integer value.");
            }
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void mainTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainTableMousePressed
        // TODO add your handling code here:
        ids = Integer.parseInt(mainTable.getValueAt(mainTable.getSelectedRow(), 0).toString());
        
        try {
            databaseConnect("accounts");
            ResultSet rs = stmt.executeQuery("SELECT * FROM ACCOUNTS WHERE USERID = " + ids);
            if (rs.next()) {
                txtEmail.setText(rs.getString("EMAIL"));
                txtPassword.setText(rs.getString("PASSWORD"));
                txtUserID.setText(String.valueOf(rs.getInt("USERID")));
                cbUserType.setSelectedItem(rs.getString("USERTYPE"));
                if (cbUserType.getSelectedItem() == "MEMBER") {
                    showMemberInfo();
                    txtFullname.setText(rs.getString("FULLNAME"));
                    txtBirthdate.setText(String.valueOf(rs.getDate("BIRTHDATE")));
                    cbSex.setSelectedItem(rs.getString("SEX"));
                    txtAddress.setText(rs.getString("ADDRESS"));
                    txtNumber.setText(String.valueOf(rs.getLong("CONTACTNUMBER")));
                }
                notEditing();
            }
            refreshRsStmt("accounts");
        } catch (SQLException err) {
            JOptionPane.showMessageDialog(null, err.getMessage());
        }
    }//GEN-LAST:event_mainTableMousePressed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        userid = Integer.parseInt(txtUserID.getText());
        editing();
        if (cbUserType.getSelectedItem() == "MEMBER") {
            editMember();
            try {
                databaseConnect("accounts");
                ResultSet rs = stmt.executeQuery("SELECT * FROM ACCOUNTS WHERE USERID = " + userid);
                if (rs.next()) {
                    String fullname = rs.getString("FULLNAME");
                    String[] name = fullname.split(" ");
                    StringBuilder resultBuilder = new StringBuilder();
                    for (int i = 0; i < name.length - 1; i++) {
                        resultBuilder.append(name[i]).append(" ");
                    }
                    String result = resultBuilder.toString().trim();
                    txtFirstname.setText(result);
                    String lastname = name[name.length - 1];
                    txtLastname.setText(lastname);
                }
                refreshRsStmt("accounts");
            } catch (SQLException err) {
            JOptionPane.showMessageDialog(null, err.getMessage());
        }
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void randomNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomNumActionPerformed
        // TODO add your handling code here:
        randNum();
    }//GEN-LAST:event_randomNumActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        if (cbUserType.getSelectedItem() != "MEMBER") {
            userid = Integer.parseInt(txtUserID.getText());
            username = txtEmail.getText();
            password = txtPassword.getText();
            usertype = String.valueOf(cbUserType.getSelectedItem());

            if (username.isEmpty() || password.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Fill in the blanks!");
            } else if (username.length() < 4) {
                JOptionPane.showMessageDialog(null, "Email must be greater than or equal to 4 characters");
            } else if (password.length() < 6) {
                JOptionPane.showMessageDialog(null, "Password must be greater than or equal to 6 characters");
            } else {
                try {
                    databaseConnect("accounts");
                    ResultSet rs = stmt.executeQuery("SELECT * FROM ACCOUNTS WHERE USERID = " + userid);
                    if (rs.next()) {
                        rs.updateString("EMAIL", username);
                        rs.updateString("PASSWORD", password);
                        rs.updateString("USERTYPE", usertype);
                        rs.updateNull("FULLNAME");
                        rs.updateNull("BIRTHDATE");
                        rs.updateNull("SEX");
                        rs.updateNull("ADDRESS");
                        rs.updateNull("CONTACTNUMBER");
                        rs.updateString("USERTYPE", usertype);
                        rs.updateRow();
                        refreshRsStmt("accounts");

                        JOptionPane.showMessageDialog(null, "Account has been updated!");
                        adding();
                        Default();
                        Table();
                    }
                    refreshRsStmt("accounts");
                } catch (SQLException err) {
                    JOptionPane.showMessageDialog(null, err.getMessage());
                }
            } 
        } else {
            username = txtEmail.getText();
            password = txtPassword.getText();
            userid = Integer.parseInt(txtUserID.getText());
            usertype = String.valueOf(cbUserType.getSelectedItem());
            fullname = txtFirstname.getText() + " " + txtLastname.getText();
            birthdate = txtBirthdate.getText();
            sex = String.valueOf(cbSex.getSelectedItem());
            address = txtAddress.getText();
            stringContactNumber = txtNumber.getText();
            
            try {
                databaseConnect("accounts");
                if (username.isEmpty() || password.isEmpty() || 
                        txtFirstname.getText().isEmpty() || txtLastname.getText().isEmpty() || birthdate.isEmpty() || address.isEmpty() 
                        || stringContactNumber.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Must satisfy all fields");
                } if (username.length() < 4) {
                    JOptionPane.showMessageDialog(null, "Email must be greater than or equal to 4 characters");
                } else if (password.length() < 6) {
                    JOptionPane.showMessageDialog(null, "Password must be greater than or equal to 6 characters");
                } else if (txtFirstname.getText().length() < 3) {
                    JOptionPane.showMessageDialog(null, "Firstname must be greater than or equal to 3 characters");
                } else if (txtLastname.getText().length() < 3) {
                    JOptionPane.showMessageDialog(null, "Lastname must be greater than or equal to 3 characters");
                } else if (birthdate.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Must input your birthdate");
                } else if (address.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Must input your address");
                } else if (stringContactNumber.length() < 10) {
                    JOptionPane.showMessageDialog(null, "Contact Number must be greater than or equal to 10 characters");
                } else {
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                    java.util.Date birthDate = dateFormat.parse(birthdate);
                    java.sql.Date sqlBirthDate = new java.sql.Date(birthDate.getTime());
                    
                    contactNumber = Long.parseLong(stringContactNumber);
                    if(rs.next()) {
                        rs.updateString("EMAIL", username);
                        rs.updateString("PASSWORD", password);
                        rs.updateString("FULLNAME", fullname);
                        rs.updateDate("BIRTHDATE", sqlBirthDate);
                        rs.updateString("SEX", sex);
                        rs.updateString("ADDRESS", address);
                        rs.updateLong("CONTACTNUMBER", contactNumber);
                        rs.updateString("USERTYPE", usertype);
                        rs.updateRow();
                        refreshRsStmt("accounts");

                        JOptionPane.showMessageDialog(null, "Account has been updated!");
                        Default();
                        adding();
                        editMember();
                        Table();
                    }
                }
            } catch (SQLException err) {
                JOptionPane.showMessageDialog(null, err.getMessage());
            } catch (ParseException ex) {
                Logger.getLogger(AdminBase.class.getName()).log(Level.SEVERE, null, ex);
            } 
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        userid = Integer.parseInt(txtUserID.getText());
        
        try {
            databaseConnect("accounts");
            ResultSet rs = stmt.executeQuery("SELECT * FROM ACCOUNTS WHERE USERID = " + userid);
            if (rs.next()) {
                int del = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this account?", "Confirmation"
                        , JOptionPane.YES_NO_OPTION);
                if (del == JOptionPane.YES_OPTION) {
                    boolean hasBorrowedBooks = checkBorrowedBooks(userid);
                    databaseConnect("accounts");
                    if (hasBorrowedBooks) {
                        int confirm = JOptionPane.showConfirmDialog(null, "This account has borrowed books."
                                + "\nAre you sure to delete this account?", "Confirmation",
                                JOptionPane.YES_NO_OPTION);
                        if (confirm == 0) {
                            updateBorrowedBooks(userid);
                            rs.deleteRow();
                            
                            JOptionPane.showMessageDialog(null, "Account has been Deleted.");

                            adding();
                            Default();
                            randNum();
                            Table();
                            refreshRsStmt("accounts");
                        }
                    } else {
                        rs.deleteRow();
                        
                        JOptionPane.showMessageDialog(null, "Account has been Deleted.");

                        adding();
                        Default();
                        randNum();
                        Table();
                        refreshRsStmt("accounts");
                    }
                }
            }
            refreshRsStmt("accounts");
        } catch (SQLException err) {
            JOptionPane.showMessageDialog(null, err.getMessage());
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // TODO add your handling code here:
        logOut();
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        Table();
        adding();
        randNum();
    }//GEN-LAST:event_formWindowOpened

    private void cbUserTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbUserTypeActionPerformed
        // TODO add your handling code here:
        if (cbUserType.getSelectedItem() == "MEMBER") {
            membersPanel.setVisible(true);
            nullMember();
            editMember();
        } else {
            membersPanel.setVisible(false);
        }
    }//GEN-LAST:event_cbUserTypeActionPerformed

    private void txtNumberKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumberKeyTyped
        // TODO add your handling code here:
        char num = evt.getKeyChar();
        if (!(Character.isDigit(num))) {
            evt.consume();
        }
    }//GEN-LAST:event_txtNumberKeyTyped

    private boolean checkBorrowedBooks(int userid) {
        try {
            databaseConnect("books");
            ResultSet res = stmt.executeQuery("SELECT AVAILABILITY FROM BOOKS WHERE BORROWER = " + userid);
            if (res.next()) {
                String avail = res.getString("AVAILABILITY");
                if (avail.equals("BORROWED") || avail.equals("RETURNING")) {
                    refreshRsStmt("books");
                    return true;
                } else {
                    refreshRsStmt("books");
                    return false;
                }
            }
            refreshRsStmt("books");
            return false;
        } catch (SQLException err) {
            JOptionPane.showMessageDialog(null, err.getMessage());
            return false;
        }
        
    }
    
    private void updateBorrowedBooks(int userid) {
        try {
            databaseConnect("books");
            ResultSet res = stmt.executeQuery("SELECT AVAILABILITY, BORROWER, DUEDATE FROM BOOKS WHERE BORROWER = " + userid);
            if (res.next()) {
                res.updateString("AVAILABILITY", "AVAILABLE");
                res.updateNull("BORROWER");
                res.updateNull("DUEDATE");
                res.updateRow();
                refreshRsStmt("books");
            }
        } catch (SQLException err) {
            JOptionPane.showMessageDialog(null, err.getMessage());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbSex;
    private javax.swing.JComboBox<String> cbUserType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblFirstname;
    private javax.swing.JLabel lblFullname;
    private javax.swing.JLabel lblLastname;
    private javax.swing.JTable mainTable;
    private javax.swing.JPanel membersPanel;
    private javax.swing.JButton randomNum;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtBirthdate;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFirstname;
    private javax.swing.JTextField txtFullname;
    private javax.swing.JTextField txtLastname;
    private javax.swing.JTextField txtNumber;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtUserID;
    // End of variables declaration//GEN-END:variables
}
